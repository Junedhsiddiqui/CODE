//BFS
//Junedh_SiD

#include <bits/stdc++.h>
using namespace std;
const int N=1e3+10;
vector<int> g[N];
int vis[N];
int level[N];

void bfs(int source)
{
    queue<int> q;  //inbuild stl queue
    q.push(source);
    vis[source] = 1;

    while(!q.empty()) 
    {
        int current_vertex = q.front();
        q.pop();
        cout<< current_vertex <<" "<<endl;  //printing the order of vertex
        for(int child : g[current_vertex])
        {
            if(!vis[child])
            {
                q.push(child);
                vis[child] = 1;
                level[child] = level[current_vertex] + 1; //count the level of bfs
            }
        }
    }
}

int main()
{
    int n;
    cin>>n;
    for(int i=0; i<n; i++)
    {
        int x,y; 
        cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    bfs(1);

    for (int i=1; i<=n; i++)
    {
        cout<<i<<":"<<level[i]<<endl;   //printing the level of each vertex
    }
    
}
// here n is number of edges in the bfs
/* Input PATTERN
     1
    / \
   2   4
    \ /
     3

    n=4
    1 2
    1 4
    2 3
    4 3
*/