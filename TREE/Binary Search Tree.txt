//Junedh Siddiqui
//Sec=B
//Binary Search Tree..
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *left,*right;
};
void *insert(struct node *root,int num)
{
    struct node *newnode;
    if(root==NULL)
    {
        newnode=(struct node*)malloc(sizeof(struct node));
        newnode->data=num;
        newnode->left=NULL;
        newnode->right=NULL;
        return newnode;
    }
    else
    {
        if(num<(root->data))
        {
           root->left = insert((root->left),num);
        }
    
        else
        {
           root->right = insert((root->right),num);
        }
    }
    return root;
}
void *inordersucc(struct node* root)
{
    struct node* curr = root;
    while(curr && curr->left !=NULL)
    {
        curr=curr->left;
    }
    return curr;
}
void *delete(struct node* root,int key)
{
    if(key<root->data)
    {
        root->left=delete(root->left,key);
    }
    else if(key>root->data)
    {
        root->right=delete(root->right,key);
    }
    else
    {
        if(root->left==NULL)
        {
            struct node* temp = root->right;
            free(root);
            return temp;
        }
        else if(root->right==NULL)
        {
            struct node* temp = root->left;
            free(root);
            return temp;
        }
        struct node* temp = inordersucc(root->right);
        root->data = temp->data;
        root->right = delete(root->right, temp->data);
    }
    return root;
}
void *search(struct node* root,int key)
{
    if(root == NULL)
    {
        return NULL;
    }
    if(root->data==key)
    {
        return root;
    }
    if(root->data>key)
    {
        return search(root->left,key);
    }
    return search(root->right,key);
}
void inorder(struct node *root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf("%d\n",root->data);
        inorder(root->right);
    }
}

int main() {
    
    struct node *root = NULL ;
    
    int key , i , n , ch ;
    while(ch != 5)
    {
    printf("Enter your choice : \n");
    printf("1.Insert\n");
    printf("2.Search\n");
    printf("3.Delete\n");
    printf("4.Display\n");
    printf("5.Exit\n");
    
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:
        printf("Enter the node to insert: \n");
        scanf("%d",&key);
        root = insert(root, key);
        break ;
        
        case 2:
        printf("Enter the key to Search:\n");
        scanf("%d",&key);
        if(search(root,key)== NULL)
        {
        printf("key doesn't exist\n");
        }
        else
        {
        printf("key exist\n");
        }
        break;
    
        case 3:
        printf("Enter the node to delete:  \n");
        scanf("%d",&key);
        root = delete(root , key);
        printf("Key deleted successfully!!\n");
        break ;
        
        case 4 :
        printf("Inorder traversal\n");
        inorder(root);
        break ;
        
        case 5:
        exit(0);
        break ;
    }
  }
}
