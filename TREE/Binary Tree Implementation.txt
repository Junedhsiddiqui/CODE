//Junedh Siddiqui
//Sec=B
//Binary Tree Implementation..(Preorder-Inorder-Postorder)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *left,*right;
};
void Preorder(struct node *root)//in place of root we can write any other reference variable
{
    if(root==NULL)
    {
        return;
    }
    printf("%d",root->data);
    Preorder(root->left);
    Preorder(root->right);
}
void Inorder(struct node *root)
{
    if(root==NULL)
    {
        return;
    }
    Inorder(root->left);
    printf("%d",root->data);
    Inorder(root->right);
}
void Postorder(struct node *root)
{
    if(root==NULL)
    {
        return;
    }
    Postorder(root->left);
    Postorder(root->right);
    printf("%d",root->data);
}
struct node *create()
{
    int x;
    struct node *newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("Enter the Data(-1 for no node)=");
    scanf("%d",&x);
    if(x==-1)
    {
        return 0;
    }
    newnode->data=x;
    printf("Left child of %d\n",x);
    newnode->left=create();
    printf("Right child of %d\n",x);
    newnode->right=create();
    return newnode;
}
int main()
{
    struct node *root;
    root=NULL;
    root=create();
    printf("Preorder:");
    Preorder(root);
    printf("\nInorder:");
    Inorder(root);
    printf("\nPostorder:");
    Postorder(root);
}
