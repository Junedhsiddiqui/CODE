//Q.  circular Queue implementation
#include<stdio.h>
#define N 5
int front=-1;
int rare=-1;
int queue[N];
void enqueue(int x)
{
    if(((rare+1)%N)==front)
    {
        printf("\nqueueid is full");
    }
    else if(front==-1&&rare==-1)
    {
        front=rare=0;
        queue[rare]=x;
    }
    else
    {
     rare=(rare+1)%N;
     queue[rare]=x;
    }
}
void dequeue()
{
    if(front==-1&&rare==-1)
    { 
        printf("queue is empty");
    } 
    else if(front==rare)
    {
        front=rare=-1;
    }
   else
    {
        printf("\n deleted data is:%d",queue[front]);
        front=(front+1)%N;
    }
}
void display()
{
    int i=front;
    if(front==-1&&rare==-1)
    {
        printf("\nqueue is empty");
    }
   else
    {
     while(i!=rare)
     {
         printf("\n%d",queue[i]);
         i=(i+1)%N;
     }
     printf("\n%d",queue[rare]);
    }
}
int main()
{
         enqueue(2);
         enqueue(-1);
         enqueue(5);
         enqueue(6);
         enqueue(7);
         display();
         dequeue();
         dequeue();
         enqueue(0);
         enqueue(10);
         display();
}